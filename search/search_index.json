{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OrderFlow","text":""},{"location":"#orderflow","title":"OrderFlow","text":"<p>OrderFlow is a real-time e-commerce order tracking platform built with Spring Boot, Spring Cloud, Apache Kafka, and Angular. It enables seamless order creation, real-time delivery tracking, and live updates through event streaming.</p> <p></p>"},{"location":"#components","title":"Components","text":"<pre><code>graph TD\n  A[Frontend UI] --&gt; |REST / WebSocket| B{API Gateway};\n  B --&gt; C[Producer Service];\n  B --&gt; D[Consumer Order Service];\n  B --&gt; E[Consumer Delivery Service];\n  F[Consul Registry]\n  G[Kafka UI]</code></pre>"},{"location":"#running-the-application","title":"Running the Application","text":"<p>In order to run this starter application locally you need to have Docker and Docker-Compose installed on your machine. Clone the repository: <pre><code>git clone https://github.com/romdhanisam/OrderFlow.git\ncd OrderFlow\n</code></pre> <pre><code>docker-compose up --build\n</code></pre> This command will build and start all the services in the docker-compose.yml file, including:</p> <ol> <li>Kafka: The event streaming platform that enables real-time delivery tracking.</li> <li>Consul: The service registry for dynamic service discovery.</li> <li>Spring Cloud Gateway: Handles routing and load balancing between services.</li> <li>Producer and Consumer Services: Handle order events and delivery tracking.</li> <li>Frontend: Provides the Angular UI to display the order status and driver locations.</li> </ol>"},{"location":"Components/","title":"Components","text":"<pre><code>+---------------------+                    +-------------------------+\n|  Frontend UI        | ---------------&gt;   |      API Gateway        |\n| (Angular + Leaflet) | (REST / WebSocket) |   (Spring Cloud Gateway)|\n+---------------------+                    +-------------------------+\n                                                  |\n                                                  \u25bc\n                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                    \u2502        Apache Kafka           \u2502\n                                    \u2502  (order-topic, delivery-topic)\u2502\n                                    \u2502    Simulates orders           \u2502\n                                    \u2502       &amp;  driver location      \u2502\n                                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502  \u2502\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u25bc                                          \u25bc\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502  Consumer Order Service    \u2502                 \u2502 Consumer Delivery Service  \u2502\n      \u2502 (Group: order-group)       \u2502                 \u2502 (Group: delivery-group)    \u2502\n      \u2502 - Consumes new orders      \u2502                 \u2502 - Consumes driver location \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502        Consul Registry       \u2502\n            \u2502 (Service Discovery &amp; Health) \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502          Kafka UI            \u2502\n             \u2502      (Topic inspection)      \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"Data_Flow_Summary/","title":"Data Flow Summary","text":"<ol> <li>Producer Service \u2192 Publishes new orders to Kafka (order-topic).</li> <li>Consumer Order Service \u2192 Processes order events<ol> <li>Listens to order-topic (order list updates).</li> <li>Broadcasts order list in real time to connected WebSocket clients.</li> </ol> </li> <li>Consumer Delivery Service \u2192<ol> <li>Listens to delivery-topic (driver position updates).</li> <li>Broadcasts updates in real time to connected WebSocket clients.</li> </ol> </li> <li>Angular Frontend \u2192 Displays orders and live locations on a map (Leaflet).</li> </ol>"},{"location":"Technology/","title":"Technology","text":"<p>Technology Stack used for development:</p> <ul> <li>Spring Boot</li> <li>Spring Cloud</li> <li>Apache Kafka</li> <li>Consul</li> <li>Angular</li> <li>Cypress</li> <li>Jest</li> <li>Cucumber</li> </ul>"},{"location":"gateway/","title":"Gateway Service Configuration","text":"<p>The gateway-service is a Spring Cloud Gateway application that acts as the entry point for all client requests. It routes incoming HTTP requests to the appropriate microservices.</p> <p>Example (application.yml) <pre><code>spring:\n   cloud:\n      gateway:\n         server:\n            webflux:\n               discovery:\n                  locator:\n                     enabled: true\n               routes:\n                  - id: producer-service\n                    uri: lb://producer-service\n                    predicates:\n                       - Path=/api/**\n                  - id: consumer-order-service\n                    uri: lb://consumer-order-service\n                    predicates:\n                       - Path=/ws-orders/**\n                  - id: consumer-delivery-service\n                    uri: lb://consumer-delivery-service\n                    predicates:\n                       - Path=/ws-delivery/**\n</code></pre></p>"},{"location":"svc/","title":"Services","text":""},{"location":"svc/#docker-services","title":"Docker services","text":"Services Port Role gateway-service 8000 API Gateway for routing requests to the appropriate microservice producer-service 9000 Publishes order creation events to Kafka consumer-order-service 9001 Consumes order events (order-topic) consumer-delivery-service 9002 Consumes delivery events (delivery-topic) and simulates real-time driver locations consul 8500 Service registry for discovery &amp; health checks kafka 9092 Message broker for streaming data (Kraft Mode) zookeeper 2181 Coordinates Kafka broker kafka-ui 8501 Web UI to monitor Kafka topics and consumers"}]}