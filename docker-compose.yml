version: '3.8'

networks:
  order_flow_network:
    driver: bridge
volumes:
  kafka_data:

services:

  consul:
    hostname: consul
    build: ./service-registry
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - ./service-registry/consul.json:/consul/config/consul.json
    networks:
      - order_flow_network

  gateway-service:
    container_name: gateway-container
    build: gateway-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://gateway-service:8000/actuator/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - order_flow_network

  producer-service:
    container_name: producer-container
    build: producer-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://producer-service:9000/actuator/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - order_flow_network

  consumer-order-service:
    container_name: consumer-order
    build: consumer-order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "9001:9001"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer-order-service:9001/actuator/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - order_flow_network

  consumer-delivery-service:
    container_name: consumer-delivery
    build: consumer-delivery-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "9002:9002"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer-delivery-service:9002/actuator/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - order_flow_network

  frontend:
    container_name: frontend
    build:
      context: order-flow-ui
      dockerfile: ./Dockerfile
      args:
        configuration: qa
    ports:
      - "80:80"
    depends_on:
      producer-service:
        condition: service_healthy
      consumer-order-service:
        condition: service_healthy
      consumer-delivery-service:
        condition: service_healthy
    networks:
      - order_flow_network

  kafka:
    image: confluentinc/cp-kafka:8.1.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - order_flow_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - order_flow_network
